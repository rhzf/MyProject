<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zsp.comic.dao.VideoDao">
    <!--填写映射当前的Mapper接口，所有的增删改查的参数和返回值类型，
		就可以直接填写缩写，不区分大小写，直接通过方法名去找类型-->
    <!--要返回的结果,type就是数据库对应的对象-->
    <resultMap id="video" type="com.zsp.comic.entity.Video">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="comic_id" property="comicId" jdbcType="INTEGER" />       <!--property即为实体类的字段名,不要忘记jdbcType-->
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="address" property="address" jdbcType="VARCHAR" />
        <result column="collect" property="collect" jdbcType="VARCHAR" />
        <result column="video_url" property="videoUrl" jdbcType="VARCHAR" />
    </resultMap>

    <!--sql语句-->
    <!--id即为前面声明的方法名，parameterType是要传入的参数的数据类型-->
    <select id="getVideoById" resultMap="video" parameterType="java.lang.Integer">
        SELECT id, comic_id, `name`, address, collect, video_url FROM `t_video` WHERE id = #{id} ORDER BY collect
    </select>

    <select id="getVideoByComicId" resultMap="video" parameterType="java.lang.Integer">
        SELECT id, comic_id, `name`, address, collect, video_url FROM `t_video` WHERE comic_id = #{comicId} ORDER BY collect
    </select>

    <select id="getVideoByName" resultMap="video" parameterType="java.lang.String">
        SELECT id, comic_id, `name`, address, collect, video_url FROM `t_video` WHERE `name` = #{name} ORDER BY collect
    </select>

    <select id="getVideoAddressGroupByComicId" resultType="String" parameterType="java.lang.Integer">
        SELECT v.address FROM `t_video` v WHERE v.comic_id = #{comicId} GROUP BY v.address
    </select>

    <insert id="addVideo" parameterType="com.zsp.comic.entity.Video">
        INSERT INTO `t_video` (`name`, address, collect, video_url) VALUES(#{name}, #{address}, #{collect}, #{videoUrl})
    </insert>

    <insert id="addManyVideo" parameterType="java.util.List">
        INSERT INTO `t_video` (`name`, address, collect, video_url)
        <foreach collection="list" item="videos" separator=",">
            (#{name}, #{address}, #{collect}, #{videoUrl})
        </foreach>
    </insert>

    <update id="updateVideo" parameterType="com.zsp.comic.entity.Video">
        UPDATE
        `t_video`
        SET `name` = #{name}, address = #{address}, collect = #{collect}, video_url = #{videoUrl}
        WHERE id = #{id}
    </update>

    <update id="updateManyVideo" parameterType="java.util.List">
        <!-- 接收list参数，循环着组装sql语句，注意for循环的写法
          separator=";" 代表着每次循环完，在sql后面放一个分号
        item="cus" 循环List的每条的结果集
        collection="videos" videos 即为List传过来的参数 -->
        <foreach collection="videos" item="cus" separator=";">
            UPDATE
            `t_video`
            SET `name` = #{name}, address = #{address}, collect = #{collect}, video_url = #{videoUrl}
            WHERE  comic_id = #{comicId}
        </foreach>
    </update>

    <delete id="deleteVideo" parameterType="java.lang.Integer">
        DELETE FROM `t_video` WHERE id = #{id}
    </delete>

    <delete id="deleteVideoByName" parameterType="java.lang.String">
        DELETE FROM `t_video` WHERE `name` = #{name}
    </delete>
</mapper>

